// Code generated by protoc-gen-go.
// source: organise.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	organise.proto

It has these top-level messages:
	Empty
	ReleasePlacement
	Location
	Organisation
	OrganisationList
	LocationMove
	OrganisationMoves
	ReleaseLocation
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import godiscogs "github.com/brotherlogic/godiscogs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// The means by which the folder is sorted
type Location_Sorting int32

const (
	Location_BY_LABEL_CATNO Location_Sorting = 0
)

var Location_Sorting_name = map[int32]string{
	0: "BY_LABEL_CATNO",
}
var Location_Sorting_value = map[string]int32{
	"BY_LABEL_CATNO": 0,
}

func (x Location_Sorting) String() string {
	return proto1.EnumName(Location_Sorting_name, int32(x))
}
func (Location_Sorting) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReleasePlacement struct {
	// The id of the release
	ReleaseId int32 `protobuf:"varint,1,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	// The index in the folder
	Index int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// The slot in the folder
	Slot int32 `protobuf:"varint,3,opt,name=slot" json:"slot,omitempty"`
	// The prior release
	BeforeReleaseId int32 `protobuf:"varint,4,opt,name=before_release_id,json=beforeReleaseId" json:"before_release_id,omitempty"`
	// The following release
	AfterReleaseId int32 `protobuf:"varint,5,opt,name=after_release_id,json=afterReleaseId" json:"after_release_id,omitempty"`
}

func (m *ReleasePlacement) Reset()                    { *m = ReleasePlacement{} }
func (m *ReleasePlacement) String() string            { return proto1.CompactTextString(m) }
func (*ReleasePlacement) ProtoMessage()               {}
func (*ReleasePlacement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Location struct {
	// The name of the location
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The number of units within the location
	Units int32 `protobuf:"varint,2,opt,name=units" json:"units,omitempty"`
	// The folder ids that are stored in this location
	FolderIds []int32 `protobuf:"varint,3,rep,name=folder_ids,json=folderIds" json:"folder_ids,omitempty"`
	// The placement of releases in the folder
	ReleasesLocation []*ReleasePlacement `protobuf:"bytes,4,rep,name=releases_location,json=releasesLocation" json:"releases_location,omitempty"`
	Sort             Location_Sorting    `protobuf:"varint,5,opt,name=sort,enum=proto.Location_Sorting" json:"sort,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto1.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Location) GetReleasesLocation() []*ReleasePlacement {
	if m != nil {
		return m.ReleasesLocation
	}
	return nil
}

type Organisation struct {
	// Timestamp this organisation was made
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The locations in this sorting
	Locations []*Location `protobuf:"bytes,2,rep,name=locations" json:"locations,omitempty"`
}

func (m *Organisation) Reset()                    { *m = Organisation{} }
func (m *Organisation) String() string            { return proto1.CompactTextString(m) }
func (*Organisation) ProtoMessage()               {}
func (*Organisation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Organisation) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

type OrganisationList struct {
	Organisations []*Organisation `protobuf:"bytes,1,rep,name=organisations" json:"organisations,omitempty"`
}

func (m *OrganisationList) Reset()                    { *m = OrganisationList{} }
func (m *OrganisationList) String() string            { return proto1.CompactTextString(m) }
func (*OrganisationList) ProtoMessage()               {}
func (*OrganisationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OrganisationList) GetOrganisations() []*Organisation {
	if m != nil {
		return m.Organisations
	}
	return nil
}

type LocationMove struct {
	Old *ReleasePlacement `protobuf:"bytes,1,opt,name=old" json:"old,omitempty"`
	New *ReleasePlacement `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
}

func (m *LocationMove) Reset()                    { *m = LocationMove{} }
func (m *LocationMove) String() string            { return proto1.CompactTextString(m) }
func (*LocationMove) ProtoMessage()               {}
func (*LocationMove) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LocationMove) GetOld() *ReleasePlacement {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *LocationMove) GetNew() *ReleasePlacement {
	if m != nil {
		return m.New
	}
	return nil
}

type OrganisationMoves struct {
	StartTimestamp int64           `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   int64           `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	Moves          []*LocationMove `protobuf:"bytes,3,rep,name=moves" json:"moves,omitempty"`
}

func (m *OrganisationMoves) Reset()                    { *m = OrganisationMoves{} }
func (m *OrganisationMoves) String() string            { return proto1.CompactTextString(m) }
func (*OrganisationMoves) ProtoMessage()               {}
func (*OrganisationMoves) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OrganisationMoves) GetMoves() []*LocationMove {
	if m != nil {
		return m.Moves
	}
	return nil
}

type ReleaseLocation struct {
	Location *Location          `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Slot     int32              `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	Before   *godiscogs.Release `protobuf:"bytes,3,opt,name=before" json:"before,omitempty"`
	After    *godiscogs.Release `protobuf:"bytes,4,opt,name=after" json:"after,omitempty"`
}

func (m *ReleaseLocation) Reset()                    { *m = ReleaseLocation{} }
func (m *ReleaseLocation) String() string            { return proto1.CompactTextString(m) }
func (*ReleaseLocation) ProtoMessage()               {}
func (*ReleaseLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReleaseLocation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ReleaseLocation) GetBefore() *godiscogs.Release {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *ReleaseLocation) GetAfter() *godiscogs.Release {
	if m != nil {
		return m.After
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*ReleasePlacement)(nil), "proto.ReleasePlacement")
	proto1.RegisterType((*Location)(nil), "proto.Location")
	proto1.RegisterType((*Organisation)(nil), "proto.Organisation")
	proto1.RegisterType((*OrganisationList)(nil), "proto.OrganisationList")
	proto1.RegisterType((*LocationMove)(nil), "proto.LocationMove")
	proto1.RegisterType((*OrganisationMoves)(nil), "proto.OrganisationMoves")
	proto1.RegisterType((*ReleaseLocation)(nil), "proto.ReleaseLocation")
	proto1.RegisterEnum("proto.Location_Sorting", Location_Sorting_name, Location_Sorting_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for OrganiserService service

type OrganiserServiceClient interface {
	Organise(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrganisationMoves, error)
	Locate(ctx context.Context, in *godiscogs.Release, opts ...grpc.CallOption) (*ReleaseLocation, error)
	AddLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
	GetLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
	GetOrganisations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrganisationList, error)
	GetOrganisation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organisation, error)
}

type organiserServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrganiserServiceClient(cc *grpc.ClientConn) OrganiserServiceClient {
	return &organiserServiceClient{cc}
}

func (c *organiserServiceClient) Organise(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrganisationMoves, error) {
	out := new(OrganisationMoves)
	err := grpc.Invoke(ctx, "/proto.OrganiserService/Organise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organiserServiceClient) Locate(ctx context.Context, in *godiscogs.Release, opts ...grpc.CallOption) (*ReleaseLocation, error) {
	out := new(ReleaseLocation)
	err := grpc.Invoke(ctx, "/proto.OrganiserService/Locate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organiserServiceClient) AddLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := grpc.Invoke(ctx, "/proto.OrganiserService/AddLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organiserServiceClient) GetLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := grpc.Invoke(ctx, "/proto.OrganiserService/GetLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organiserServiceClient) GetOrganisations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrganisationList, error) {
	out := new(OrganisationList)
	err := grpc.Invoke(ctx, "/proto.OrganiserService/GetOrganisations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organiserServiceClient) GetOrganisation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organisation, error) {
	out := new(Organisation)
	err := grpc.Invoke(ctx, "/proto.OrganiserService/GetOrganisation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrganiserService service

type OrganiserServiceServer interface {
	Organise(context.Context, *Empty) (*OrganisationMoves, error)
	Locate(context.Context, *godiscogs.Release) (*ReleaseLocation, error)
	AddLocation(context.Context, *Location) (*Location, error)
	GetLocation(context.Context, *Location) (*Location, error)
	GetOrganisations(context.Context, *Empty) (*OrganisationList, error)
	GetOrganisation(context.Context, *Empty) (*Organisation, error)
}

func RegisterOrganiserServiceServer(s *grpc.Server, srv OrganiserServiceServer) {
	s.RegisterService(&_OrganiserService_serviceDesc, srv)
}

func _OrganiserService_Organise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganiserServiceServer).Organise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrganiserService/Organise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganiserServiceServer).Organise(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganiserService_Locate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(godiscogs.Release)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganiserServiceServer).Locate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrganiserService/Locate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganiserServiceServer).Locate(ctx, req.(*godiscogs.Release))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganiserService_AddLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganiserServiceServer).AddLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrganiserService/AddLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganiserServiceServer).AddLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganiserService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganiserServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrganiserService/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganiserServiceServer).GetLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganiserService_GetOrganisations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganiserServiceServer).GetOrganisations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrganiserService/GetOrganisations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganiserServiceServer).GetOrganisations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganiserService_GetOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganiserServiceServer).GetOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrganiserService/GetOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganiserServiceServer).GetOrganisation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganiserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrganiserService",
	HandlerType: (*OrganiserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Organise",
			Handler:    _OrganiserService_Organise_Handler,
		},
		{
			MethodName: "Locate",
			Handler:    _OrganiserService_Locate_Handler,
		},
		{
			MethodName: "AddLocation",
			Handler:    _OrganiserService_AddLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _OrganiserService_GetLocation_Handler,
		},
		{
			MethodName: "GetOrganisations",
			Handler:    _OrganiserService_GetOrganisations_Handler,
		},
		{
			MethodName: "GetOrganisation",
			Handler:    _OrganiserService_GetOrganisation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("organise.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xae, 0x93, 0xba, 0x6d, 0xa6, 0x69, 0xe2, 0xee, 0xef, 0x27, 0x1a, 0x45, 0x54, 0x42, 0xe6,
	0x40, 0x0b, 0x22, 0x55, 0x0b, 0x42, 0x42, 0x9c, 0x5a, 0xa8, 0x50, 0xa5, 0x94, 0x22, 0xb7, 0x17,
	0xc4, 0xc1, 0x72, 0xec, 0xad, 0xbb, 0x92, 0xed, 0x8d, 0xbc, 0xdb, 0x02, 0xef, 0xc0, 0x83, 0x70,
	0xe5, 0x79, 0x38, 0xf3, 0x1e, 0xec, 0xce, 0xfa, 0x5f, 0x4c, 0x54, 0x89, 0x53, 0xd6, 0xdf, 0x7e,
	0x33, 0xf3, 0x7d, 0x33, 0x3b, 0x81, 0x01, 0xcf, 0xe3, 0x20, 0x63, 0x82, 0x4e, 0xe6, 0x39, 0x97,
	0x9c, 0xd8, 0xf8, 0x33, 0x3e, 0x8c, 0x99, 0xbc, 0xb9, 0x9d, 0x4d, 0x42, 0x9e, 0x1e, 0xcc, 0x14,
	0x72, 0x43, 0xf3, 0x84, 0xc7, 0x2c, 0x3c, 0x88, 0x79, 0xc4, 0x44, 0xc8, 0x63, 0x51, 0x9f, 0x4c,
	0xa4, 0xbb, 0x0e, 0xf6, 0x69, 0x3a, 0x97, 0xdf, 0xdc, 0x9f, 0x16, 0x38, 0x1e, 0x4d, 0x68, 0x20,
	0xe8, 0xc7, 0x24, 0x08, 0x69, 0x4a, 0x33, 0x49, 0x76, 0x01, 0x72, 0x83, 0xf9, 0x2c, 0x1a, 0x59,
	0x8f, 0xac, 0x3d, 0xdb, 0xeb, 0x15, 0xc8, 0x59, 0x44, 0xfe, 0x07, 0x9b, 0x65, 0x11, 0xfd, 0x3a,
	0xea, 0xe0, 0x8d, 0xf9, 0x20, 0x04, 0x56, 0x45, 0xc2, 0xe5, 0xa8, 0x8b, 0x20, 0x9e, 0xc9, 0x53,
	0xd8, 0x9e, 0xd1, 0x6b, 0x9e, 0x53, 0xbf, 0x91, 0x6f, 0x15, 0x09, 0x43, 0x73, 0xe1, 0x55, 0x59,
	0xf7, 0xc0, 0x09, 0xae, 0x25, 0xcd, 0x9b, 0x54, 0x1b, 0xa9, 0x03, 0xc4, 0x2b, 0xa6, 0xfb, 0xdb,
	0x82, 0x8d, 0x29, 0x0f, 0x03, 0xc9, 0x78, 0xa6, 0xcb, 0x66, 0x41, 0x4a, 0x51, 0x65, 0xcf, 0xc3,
	0xb3, 0x16, 0x78, 0x9b, 0x31, 0x29, 0x4a, 0x81, 0xf8, 0xa1, 0x5d, 0x5d, 0xf3, 0x24, 0x52, 0x15,
	0x58, 0x24, 0x94, 0xcc, 0xae, 0x76, 0x65, 0x90, 0xb3, 0x48, 0x90, 0x77, 0xb0, 0x5d, 0x54, 0x16,
	0x7e, 0x52, 0x64, 0x57, 0x5a, 0xbb, 0x7b, 0x9b, 0x47, 0x3b, 0xa6, 0x6b, 0x93, 0x76, 0xa3, 0x3c,
	0xa7, 0x8c, 0xa8, 0xe4, 0x3c, 0x53, 0x5d, 0xe0, 0xb9, 0x44, 0xe5, 0x83, 0x2a, 0xb0, 0xbc, 0x9e,
	0x5c, 0xaa, 0x3b, 0x96, 0xc5, 0x1e, 0x92, 0xdc, 0x5d, 0x58, 0x2f, 0x00, 0x65, 0x63, 0x70, 0xf2,
	0xc9, 0x9f, 0x1e, 0x9f, 0x9c, 0x4e, 0xfd, 0xb7, 0xc7, 0x57, 0x1f, 0x2e, 0x9c, 0x15, 0xf7, 0x33,
	0xf4, 0x2f, 0xcc, 0xc0, 0x4d, 0xee, 0x87, 0xd0, 0x93, 0x2c, 0xa5, 0x42, 0x06, 0xe9, 0x1c, 0xfd,
	0x76, 0xbd, 0x1a, 0x20, 0xcf, 0xa1, 0x57, 0xca, 0xd6, 0xc6, 0xb5, 0xee, 0x61, 0xab, 0xbc, 0x57,
	0x33, 0xdc, 0x73, 0x70, 0x9a, 0xc9, 0xa7, 0x4c, 0x48, 0xf2, 0x1a, 0xb6, 0x78, 0x03, 0x13, 0xaa,
	0x88, 0x4e, 0xf3, 0x5f, 0x91, 0xa6, 0xc9, 0xf7, 0x16, 0x99, 0x6e, 0x04, 0xfd, 0xb2, 0xca, 0x39,
	0xbf, 0xa3, 0x64, 0x1f, 0xba, 0xaa, 0xb3, 0xa8, 0xf2, 0x9e, 0xfe, 0x69, 0x8e, 0xa6, 0x66, 0xf4,
	0x0b, 0xce, 0xea, 0x3e, 0xaa, 0xe2, 0xb8, 0xdf, 0x2d, 0xd8, 0x6e, 0xaa, 0xd0, 0xa5, 0x04, 0x79,
	0x02, 0x43, 0xd5, 0x82, 0x5c, 0xfa, 0xed, 0xee, 0x0c, 0x10, 0xbe, 0xaa, 0x5a, 0xf4, 0x18, 0xb6,
	0x68, 0x16, 0x35, 0x68, 0x1d, 0xa4, 0xf5, 0x15, 0x58, 0x93, 0xf6, 0xc1, 0x4e, 0x75, 0x5a, 0x7c,
	0x21, 0xb5, 0xf9, 0xa6, 0x3b, 0xcf, 0x30, 0xdc, 0x1f, 0x16, 0x0c, 0x0b, 0xa1, 0x8d, 0x07, 0xb0,
	0x51, 0xbd, 0x1e, 0xe3, 0xfe, 0xaf, 0x29, 0x54, 0x84, 0x6a, 0x67, 0x3a, 0x0b, 0x3b, 0xb3, 0x66,
	0x56, 0x03, 0x37, 0x69, 0xf3, 0x88, 0x4c, 0xea, 0xe5, 0x2d, 0x8a, 0x79, 0x05, 0x43, 0xed, 0x8c,
	0x8d, 0xbb, 0x81, 0x3b, 0xb5, 0x9c, 0x6a, 0x08, 0x47, 0xbf, 0x3a, 0xd5, 0xbc, 0x69, 0x7e, 0x49,
	0xf3, 0x3b, 0x16, 0x52, 0xf2, 0x12, 0x36, 0x4a, 0x8c, 0xf4, 0x0b, 0x95, 0xf8, 0xb7, 0x30, 0x1e,
	0x2d, 0x19, 0x39, 0x36, 0xdb, 0x5d, 0x21, 0xaf, 0x60, 0x0d, 0xad, 0x50, 0xb2, 0xa4, 0xde, 0xf8,
	0xc1, 0xe2, 0x00, 0x4b, 0xd3, 0x2a, 0xee, 0x10, 0x36, 0x8f, 0xa3, 0xa8, 0x6a, 0x54, 0xbb, 0x2d,
	0xe3, 0x36, 0x60, 0x42, 0xde, 0x53, 0xf9, 0x4f, 0x21, 0x6f, 0xc0, 0x51, 0x21, 0x4d, 0xdd, 0xa2,
	0xe5, 0x6d, 0x67, 0x89, 0x37, 0xfd, 0xfc, 0xd1, 0xda, 0xb0, 0x15, 0xdc, 0x8a, 0x5d, 0xb6, 0x0a,
	0xee, 0xca, 0x6c, 0x0d, 0xd1, 0x17, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31, 0xcc, 0x00, 0x2f,
	0xa1, 0x05, 0x00, 0x00,
}
