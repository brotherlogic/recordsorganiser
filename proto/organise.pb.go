// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: organise.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The means by which the folder is sorted
type Location_Sorting int32

const (
	Location_BY_LABEL_CATNO      Location_Sorting = 0
	Location_BY_DATE_ADDED       Location_Sorting = 1
	Location_BY_RELEASE_DATE     Location_Sorting = 2
	Location_BY_FOLDER_THEN_DATE Location_Sorting = 3
	Location_BY_MOVE_TIME        Location_Sorting = 4
	Location_BY_LAST_LISTEN      Location_Sorting = 5
)

// Enum value maps for Location_Sorting.
var (
	Location_Sorting_name = map[int32]string{
		0: "BY_LABEL_CATNO",
		1: "BY_DATE_ADDED",
		2: "BY_RELEASE_DATE",
		3: "BY_FOLDER_THEN_DATE",
		4: "BY_MOVE_TIME",
		5: "BY_LAST_LISTEN",
	}
	Location_Sorting_value = map[string]int32{
		"BY_LABEL_CATNO":      0,
		"BY_DATE_ADDED":       1,
		"BY_RELEASE_DATE":     2,
		"BY_FOLDER_THEN_DATE": 3,
		"BY_MOVE_TIME":        4,
		"BY_LAST_LISTEN":      5,
	}
)

func (x Location_Sorting) Enum() *Location_Sorting {
	p := new(Location_Sorting)
	*p = x
	return p
}

func (x Location_Sorting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Location_Sorting) Descriptor() protoreflect.EnumDescriptor {
	return file_organise_proto_enumTypes[0].Descriptor()
}

func (Location_Sorting) Type() protoreflect.EnumType {
	return &file_organise_proto_enumTypes[0]
}

func (x Location_Sorting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Location_Sorting.Descriptor instead.
func (Location_Sorting) EnumDescriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{7, 0}
}

type Location_Checking int32

const (
	Location_UNKNOWN             Location_Checking = 0
	Location_REQUIRE_STOCK_CHECK Location_Checking = 1
)

// Enum value maps for Location_Checking.
var (
	Location_Checking_name = map[int32]string{
		0: "UNKNOWN",
		1: "REQUIRE_STOCK_CHECK",
	}
	Location_Checking_value = map[string]int32{
		"UNKNOWN":             0,
		"REQUIRE_STOCK_CHECK": 1,
	}
)

func (x Location_Checking) Enum() *Location_Checking {
	p := new(Location_Checking)
	*p = x
	return p
}

func (x Location_Checking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Location_Checking) Descriptor() protoreflect.EnumDescriptor {
	return file_organise_proto_enumTypes[1].Descriptor()
}

func (Location_Checking) Type() protoreflect.EnumType {
	return &file_organise_proto_enumTypes[1]
}

func (x Location_Checking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Location_Checking.Descriptor instead.
func (Location_Checking) EnumDescriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{7, 1}
}

type Location_InPlay int32

const (
	Location_PLAY_UNKNOWN Location_InPlay = 0
	Location_IN_PLAY      Location_InPlay = 1
	Location_NOT_IN_PLAY  Location_InPlay = 2
)

// Enum value maps for Location_InPlay.
var (
	Location_InPlay_name = map[int32]string{
		0: "PLAY_UNKNOWN",
		1: "IN_PLAY",
		2: "NOT_IN_PLAY",
	}
	Location_InPlay_value = map[string]int32{
		"PLAY_UNKNOWN": 0,
		"IN_PLAY":      1,
		"NOT_IN_PLAY":  2,
	}
)

func (x Location_InPlay) Enum() *Location_InPlay {
	p := new(Location_InPlay)
	*p = x
	return p
}

func (x Location_InPlay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Location_InPlay) Descriptor() protoreflect.EnumDescriptor {
	return file_organise_proto_enumTypes[2].Descriptor()
}

func (Location_InPlay) Type() protoreflect.EnumType {
	return &file_organise_proto_enumTypes[2]
}

func (x Location_InPlay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Location_InPlay.Descriptor instead.
func (Location_InPlay) EnumDescriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{7, 2}
}

type Location_MediaType int32

const (
	Location_UNKNOWN_TYPE Location_MediaType = 0
	Location_PHYSICAL     Location_MediaType = 1
	Location_DIGITAL      Location_MediaType = 2
	Location_MIX          Location_MediaType = 3
)

// Enum value maps for Location_MediaType.
var (
	Location_MediaType_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "PHYSICAL",
		2: "DIGITAL",
		3: "MIX",
	}
	Location_MediaType_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"PHYSICAL":     1,
		"DIGITAL":      2,
		"MIX":          3,
	}
)

func (x Location_MediaType) Enum() *Location_MediaType {
	p := new(Location_MediaType)
	*p = x
	return p
}

func (x Location_MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Location_MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_organise_proto_enumTypes[3].Descriptor()
}

func (Location_MediaType) Type() protoreflect.EnumType {
	return &file_organise_proto_enumTypes[3]
}

func (x Location_MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Location_MediaType.Descriptor instead.
func (Location_MediaType) EnumDescriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{7, 3}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{0}
}

type SortMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId          int32  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	EarliestReleaseDate int64  `protobuf:"varint,2,opt,name=earliest_release_date,json=earliestReleaseDate,proto3" json:"earliest_release_date,omitempty"`
	Title               string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *SortMapping) Reset() {
	*x = SortMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortMapping) ProtoMessage() {}

func (x *SortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortMapping.ProtoReflect.Descriptor instead.
func (*SortMapping) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{1}
}

func (x *SortMapping) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *SortMapping) GetEarliestReleaseDate() int64 {
	if x != nil {
		return x.EarliestReleaseDate
	}
	return 0
}

func (x *SortMapping) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CacheEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32             `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Entry      map[string]string `protobuf:"bytes,2,rep,name=entry,proto3" json:"entry,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Width      float64           `protobuf:"fixed64,3,opt,name=width,proto3" json:"width,omitempty"`
	Filled     string            `protobuf:"bytes,4,opt,name=filled,proto3" json:"filled,omitempty"`
	Folder     int32             `protobuf:"varint,5,opt,name=folder,proto3" json:"folder,omitempty"`
	MainLabel  string            `protobuf:"bytes,7,opt,name=mainLabel,proto3" json:"mainLabel,omitempty"`
}

func (x *CacheEntry) Reset() {
	*x = CacheEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheEntry) ProtoMessage() {}

func (x *CacheEntry) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheEntry.ProtoReflect.Descriptor instead.
func (*CacheEntry) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{2}
}

func (x *CacheEntry) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *CacheEntry) GetEntry() map[string]string {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CacheEntry) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CacheEntry) GetFilled() string {
	if x != nil {
		return x.Filled
	}
	return ""
}

func (x *CacheEntry) GetFolder() int32 {
	if x != nil {
		return x.Folder
	}
	return 0
}

func (x *CacheEntry) GetMainLabel() string {
	if x != nil {
		return x.MainLabel
	}
	return ""
}

type SortingCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cache []*CacheEntry `protobuf:"bytes,1,rep,name=cache,proto3" json:"cache,omitempty"`
}

func (x *SortingCache) Reset() {
	*x = SortingCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortingCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortingCache) ProtoMessage() {}

func (x *SortingCache) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortingCache.ProtoReflect.Descriptor instead.
func (*SortingCache) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{3}
}

func (x *SortingCache) GetCache() []*CacheEntry {
	if x != nil {
		return x.Cache
	}
	return nil
}

type LabelExtractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the label
	LabelId int32 `protobuf:"varint,1,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
	// The extractor
	Extractor string `protobuf:"bytes,2,opt,name=extractor,proto3" json:"extractor,omitempty"`
}

func (x *LabelExtractor) Reset() {
	*x = LabelExtractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelExtractor) ProtoMessage() {}

func (x *LabelExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelExtractor.ProtoReflect.Descriptor instead.
func (*LabelExtractor) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{4}
}

func (x *LabelExtractor) GetLabelId() int32 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

func (x *LabelExtractor) GetExtractor() string {
	if x != nil {
		return x.Extractor
	}
	return ""
}

type ReleasePlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the release
	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The index in the folder
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The slot in the folder
	Slot int32 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	// The name of this release
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Determined width of this release
	DeterminedWidth float32 `protobuf:"fixed32,5,opt,name=determined_width,json=determinedWidth,proto3" json:"determined_width,omitempty"`
}

func (x *ReleasePlacement) Reset() {
	*x = ReleasePlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePlacement) ProtoMessage() {}

func (x *ReleasePlacement) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePlacement.ProtoReflect.Descriptor instead.
func (*ReleasePlacement) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{5}
}

func (x *ReleasePlacement) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *ReleasePlacement) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ReleasePlacement) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ReleasePlacement) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReleasePlacement) GetDeterminedWidth() float32 {
	if x != nil {
		return x.DeterminedWidth
	}
	return 0
}

type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of allowed units
	NumOfSlots int32 `protobuf:"varint,1,opt,name=num_of_slots,json=numOfSlots,proto3" json:"num_of_slots,omitempty"`
	// The total width of each slot
	TotalWidth float32 `protobuf:"fixed32,2,opt,name=total_width,json=totalWidth,proto3" json:"total_width,omitempty"`
	// Types that are assignable to QuotaType:
	//	*Quota_Slots
	//	*Quota_Width
	//	*Quota_AbsoluteWidth
	QuotaType isQuota_QuotaType `protobuf_oneof:"quota_type"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{6}
}

func (x *Quota) GetNumOfSlots() int32 {
	if x != nil {
		return x.NumOfSlots
	}
	return 0
}

func (x *Quota) GetTotalWidth() float32 {
	if x != nil {
		return x.TotalWidth
	}
	return 0
}

func (m *Quota) GetQuotaType() isQuota_QuotaType {
	if m != nil {
		return m.QuotaType
	}
	return nil
}

func (x *Quota) GetSlots() int32 {
	if x, ok := x.GetQuotaType().(*Quota_Slots); ok {
		return x.Slots
	}
	return 0
}

func (x *Quota) GetWidth() float32 {
	if x, ok := x.GetQuotaType().(*Quota_Width); ok {
		return x.Width
	}
	return 0
}

func (x *Quota) GetAbsoluteWidth() float32 {
	if x, ok := x.GetQuotaType().(*Quota_AbsoluteWidth); ok {
		return x.AbsoluteWidth
	}
	return 0
}

type isQuota_QuotaType interface {
	isQuota_QuotaType()
}

type Quota_Slots struct {
	// The number of allowed units
	Slots int32 `protobuf:"varint,3,opt,name=slots,proto3,oneof"`
}

type Quota_Width struct {
	// The total width of the set
	Width float32 `protobuf:"fixed32,4,opt,name=width,proto3,oneof"`
}

type Quota_AbsoluteWidth struct {
	// The overall width
	AbsoluteWidth float32 `protobuf:"fixed32,5,opt,name=absolute_width,json=absoluteWidth,proto3,oneof"`
}

func (*Quota_Slots) isQuota_QuotaType() {}

func (*Quota_Width) isQuota_QuotaType() {}

func (*Quota_AbsoluteWidth) isQuota_QuotaType() {}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the location
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The number of units within the location
	Slots int32 `protobuf:"varint,2,opt,name=slots,proto3" json:"slots,omitempty"`
	// The folder ids that are stored in this location
	FolderIds   []int32                    `protobuf:"varint,3,rep,packed,name=folder_ids,json=folderIds,proto3" json:"folder_ids,omitempty"`
	FolderOrder map[int32]int32            `protobuf:"bytes,19,rep,name=folder_order,json=folderOrder,proto3" json:"folder_order,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FolderSort  map[int32]Location_Sorting `protobuf:"bytes,20,rep,name=folder_sort,json=folderSort,proto3" json:"folder_sort,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=recordsorganiser.Location_Sorting"`
	HardGap     map[int32]bool             `protobuf:"bytes,21,rep,name=hard_gap,json=hardGap,proto3" json:"hard_gap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The placement of releases in the folder
	ReleasesLocation []*ReleasePlacement `protobuf:"bytes,4,rep,name=releases_location,json=releasesLocation,proto3" json:"releases_location,omitempty"`
	Sort             Location_Sorting    `protobuf:"varint,5,opt,name=sort,proto3,enum=recordsorganiser.Location_Sorting" json:"sort,omitempty"`
	// The timestamp of this given location / arrangement
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The allowed quota for this location, if any
	Quota *Quota `protobuf:"bytes,7,opt,name=quota,proto3" json:"quota,omitempty"`
	// The type of format we expect in this location
	ExpectedFormat string `protobuf:"bytes,8,opt,name=expected_format,json=expectedFormat,proto3" json:"expected_format,omitempty"`
	// The type of label we don't expect in this location
	UnexpectedLabel string `protobuf:"bytes,9,opt,name=unexpected_label,json=unexpectedLabel,proto3" json:"unexpected_label,omitempty"`
	// Don't send an alert when there are quota problems
	NoAlert bool `protobuf:"varint,10,opt,name=no_alert,json=noAlert,proto3" json:"no_alert,omitempty"`
	// Folder to move to when this is over quota
	SpillFolder int32 `protobuf:"varint,11,opt,name=spill_folder,json=spillFolder,proto3" json:"spill_folder,omitempty"`
	// Quota Check opt out - if set no alerts on quota
	OptOutQuotaChecks bool `protobuf:"varint,12,opt,name=opt_out_quota_checks,json=optOutQuotaChecks,proto3" json:"opt_out_quota_checks,omitempty"`
	// Time to include reorgs, if < 0 we don't reorg
	ReorgTime      int64              `protobuf:"varint,13,opt,name=reorg_time,json=reorgTime,proto3" json:"reorg_time,omitempty"`
	LastReorg      int64              `protobuf:"varint,14,opt,name=last_reorg,json=lastReorg,proto3" json:"last_reorg,omitempty"`
	Checking       Location_Checking  `protobuf:"varint,15,opt,name=checking,proto3,enum=recordsorganiser.Location_Checking" json:"checking,omitempty"`
	OverQuotaTime  int64              `protobuf:"varint,16,opt,name=over_quota_time,json=overQuotaTime,proto3" json:"over_quota_time,omitempty"`
	InPlay         Location_InPlay    `protobuf:"varint,17,opt,name=in_play,json=inPlay,proto3,enum=recordsorganiser.Location_InPlay" json:"in_play,omitempty"`
	MediaType      Location_MediaType `protobuf:"varint,18,opt,name=media_type,json=mediaType,proto3,enum=recordsorganiser.Location_MediaType" json:"media_type,omitempty"`
	AllowAdjust    bool               `protobuf:"varint,22,opt,name=allow_adjust,json=allowAdjust,proto3" json:"allow_adjust,omitempty"`
	CombineSimilar bool               `protobuf:"varint,23,opt,name=combine_similar,json=combineSimilar,proto3" json:"combine_similar,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{7}
}

func (x *Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *Location) GetFolderIds() []int32 {
	if x != nil {
		return x.FolderIds
	}
	return nil
}

func (x *Location) GetFolderOrder() map[int32]int32 {
	if x != nil {
		return x.FolderOrder
	}
	return nil
}

func (x *Location) GetFolderSort() map[int32]Location_Sorting {
	if x != nil {
		return x.FolderSort
	}
	return nil
}

func (x *Location) GetHardGap() map[int32]bool {
	if x != nil {
		return x.HardGap
	}
	return nil
}

func (x *Location) GetReleasesLocation() []*ReleasePlacement {
	if x != nil {
		return x.ReleasesLocation
	}
	return nil
}

func (x *Location) GetSort() Location_Sorting {
	if x != nil {
		return x.Sort
	}
	return Location_BY_LABEL_CATNO
}

func (x *Location) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Location) GetQuota() *Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *Location) GetExpectedFormat() string {
	if x != nil {
		return x.ExpectedFormat
	}
	return ""
}

func (x *Location) GetUnexpectedLabel() string {
	if x != nil {
		return x.UnexpectedLabel
	}
	return ""
}

func (x *Location) GetNoAlert() bool {
	if x != nil {
		return x.NoAlert
	}
	return false
}

func (x *Location) GetSpillFolder() int32 {
	if x != nil {
		return x.SpillFolder
	}
	return 0
}

func (x *Location) GetOptOutQuotaChecks() bool {
	if x != nil {
		return x.OptOutQuotaChecks
	}
	return false
}

func (x *Location) GetReorgTime() int64 {
	if x != nil {
		return x.ReorgTime
	}
	return 0
}

func (x *Location) GetLastReorg() int64 {
	if x != nil {
		return x.LastReorg
	}
	return 0
}

func (x *Location) GetChecking() Location_Checking {
	if x != nil {
		return x.Checking
	}
	return Location_UNKNOWN
}

func (x *Location) GetOverQuotaTime() int64 {
	if x != nil {
		return x.OverQuotaTime
	}
	return 0
}

func (x *Location) GetInPlay() Location_InPlay {
	if x != nil {
		return x.InPlay
	}
	return Location_PLAY_UNKNOWN
}

func (x *Location) GetMediaType() Location_MediaType {
	if x != nil {
		return x.MediaType
	}
	return Location_UNKNOWN_TYPE
}

func (x *Location) GetAllowAdjust() bool {
	if x != nil {
		return x.AllowAdjust
	}
	return false
}

func (x *Location) GetCombineSimilar() bool {
	if x != nil {
		return x.CombineSimilar
	}
	return false
}

type Organisation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp this organisation was made
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The locations in this sorting
	Locations []*Location `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	// The extractors used for sorting
	Extractors []*LabelExtractor `protobuf:"bytes,3,rep,name=extractors,proto3" json:"extractors,omitempty"`
	// A list of mappings for the releases
	SortMappings []*SortMapping `protobuf:"bytes,4,rep,name=sort_mappings,json=sortMappings,proto3" json:"sort_mappings,omitempty"`
}

func (x *Organisation) Reset() {
	*x = Organisation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organisation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organisation) ProtoMessage() {}

func (x *Organisation) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organisation.ProtoReflect.Descriptor instead.
func (*Organisation) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{8}
}

func (x *Organisation) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Organisation) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Organisation) GetExtractors() []*LabelExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *Organisation) GetSortMappings() []*SortMapping {
	if x != nil {
		return x.SortMappings
	}
	return nil
}

type AddLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add *Location `protobuf:"bytes,1,opt,name=add,proto3" json:"add,omitempty"`
}

func (x *AddLocationRequest) Reset() {
	*x = AddLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLocationRequest) ProtoMessage() {}

func (x *AddLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLocationRequest.ProtoReflect.Descriptor instead.
func (*AddLocationRequest) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{9}
}

func (x *AddLocationRequest) GetAdd() *Location {
	if x != nil {
		return x.Add
	}
	return nil
}

type AddLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Now *Organisation `protobuf:"bytes,1,opt,name=now,proto3" json:"now,omitempty"`
}

func (x *AddLocationResponse) Reset() {
	*x = AddLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLocationResponse) ProtoMessage() {}

func (x *AddLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLocationResponse.ProtoReflect.Descriptor instead.
func (*AddLocationResponse) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{10}
}

func (x *AddLocationResponse) GetNow() *Organisation {
	if x != nil {
		return x.Now
	}
	return nil
}

type GetOrganisationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*Location `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	// Force a reorg on returned locations
	ForceReorg bool `protobuf:"varint,2,opt,name=force_reorg,json=forceReorg,proto3" json:"force_reorg,omitempty"`
	// Reset the reorg time
	OrgReset bool `protobuf:"varint,3,opt,name=org_reset,json=orgReset,proto3" json:"org_reset,omitempty"`
}

func (x *GetOrganisationRequest) Reset() {
	*x = GetOrganisationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganisationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganisationRequest) ProtoMessage() {}

func (x *GetOrganisationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganisationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganisationRequest) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrganisationRequest) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *GetOrganisationRequest) GetForceReorg() bool {
	if x != nil {
		return x.ForceReorg
	}
	return false
}

func (x *GetOrganisationRequest) GetOrgReset() bool {
	if x != nil {
		return x.OrgReset
	}
	return false
}

type GetOrganisationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations       []*Location `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	NumberProcessed int32       `protobuf:"varint,2,opt,name=number_processed,json=numberProcessed,proto3" json:"number_processed,omitempty"`
}

func (x *GetOrganisationResponse) Reset() {
	*x = GetOrganisationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganisationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganisationResponse) ProtoMessage() {}

func (x *GetOrganisationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganisationResponse.ProtoReflect.Descriptor instead.
func (*GetOrganisationResponse) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrganisationResponse) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *GetOrganisationResponse) GetNumberProcessed() int32 {
	if x != nil {
		return x.NumberProcessed
	}
	return 0
}

type LocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	FolderId   int32 `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *LocateRequest) Reset() {
	*x = LocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateRequest) ProtoMessage() {}

func (x *LocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateRequest.ProtoReflect.Descriptor instead.
func (*LocateRequest) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{13}
}

func (x *LocateRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *LocateRequest) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

type LocateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoundLocation *Location `protobuf:"bytes,2,opt,name=found_location,json=foundLocation,proto3" json:"found_location,omitempty"`
}

func (x *LocateResponse) Reset() {
	*x = LocateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateResponse) ProtoMessage() {}

func (x *LocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateResponse.ProtoReflect.Descriptor instead.
func (*LocateResponse) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{14}
}

func (x *LocateResponse) GetFoundLocation() *Location {
	if x != nil {
		return x.FoundLocation
	}
	return nil
}

type QuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId       int32  `protobuf:"varint,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	IncludeRecords bool   `protobuf:"varint,2,opt,name=include_records,json=includeRecords,proto3" json:"include_records,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *QuotaRequest) Reset() {
	*x = QuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaRequest) ProtoMessage() {}

func (x *QuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaRequest.ProtoReflect.Descriptor instead.
func (*QuotaRequest) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{15}
}

func (x *QuotaRequest) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *QuotaRequest) GetIncludeRecords() bool {
	if x != nil {
		return x.IncludeRecords
	}
	return false
}

func (x *QuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverQuota    bool    `protobuf:"varint,1,opt,name=over_quota,json=overQuota,proto3" json:"over_quota,omitempty"`
	SpillFolder  int32   `protobuf:"varint,2,opt,name=spill_folder,json=spillFolder,proto3" json:"spill_folder,omitempty"`
	LocationName string  `protobuf:"bytes,3,opt,name=location_name,json=locationName,proto3" json:"location_name,omitempty"`
	InstanceId   []int32 `protobuf:"varint,4,rep,packed,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Quota        *Quota  `protobuf:"bytes,5,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *QuotaResponse) Reset() {
	*x = QuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaResponse) ProtoMessage() {}

func (x *QuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaResponse.ProtoReflect.Descriptor instead.
func (*QuotaResponse) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{16}
}

func (x *QuotaResponse) GetOverQuota() bool {
	if x != nil {
		return x.OverQuota
	}
	return false
}

func (x *QuotaResponse) GetSpillFolder() int32 {
	if x != nil {
		return x.SpillFolder
	}
	return 0
}

func (x *QuotaResponse) GetLocationName() string {
	if x != nil {
		return x.LocationName
	}
	return ""
}

func (x *QuotaResponse) GetInstanceId() []int32 {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *QuotaResponse) GetQuota() *Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

type UpdateLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location       string    `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Update         *Location `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
	DeleteLocation bool      `protobuf:"varint,3,opt,name=delete_location,json=deleteLocation,proto3" json:"delete_location,omitempty"`
}

func (x *UpdateLocationRequest) Reset() {
	*x = UpdateLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationRequest) ProtoMessage() {}

func (x *UpdateLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocationRequest) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateLocationRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateLocationRequest) GetUpdate() *Location {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateLocationRequest) GetDeleteLocation() bool {
	if x != nil {
		return x.DeleteLocation
	}
	return false
}

type UpdateLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateLocationResponse) Reset() {
	*x = UpdateLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationResponse) ProtoMessage() {}

func (x *UpdateLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationResponse.ProtoReflect.Descriptor instead.
func (*UpdateLocationResponse) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{18}
}

type AddExtractorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extractor *LabelExtractor `protobuf:"bytes,1,opt,name=extractor,proto3" json:"extractor,omitempty"`
}

func (x *AddExtractorRequest) Reset() {
	*x = AddExtractorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExtractorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExtractorRequest) ProtoMessage() {}

func (x *AddExtractorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExtractorRequest.ProtoReflect.Descriptor instead.
func (*AddExtractorRequest) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{19}
}

func (x *AddExtractorRequest) GetExtractor() *LabelExtractor {
	if x != nil {
		return x.Extractor
	}
	return nil
}

type AddExtractorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddExtractorResponse) Reset() {
	*x = AddExtractorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExtractorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExtractorResponse) ProtoMessage() {}

func (x *AddExtractorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExtractorResponse.ProtoReflect.Descriptor instead.
func (*AddExtractorResponse) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{20}
}

type GetCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCacheRequest) Reset() {
	*x = GetCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheRequest) ProtoMessage() {}

func (x *GetCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheRequest.ProtoReflect.Descriptor instead.
func (*GetCacheRequest) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{21}
}

type GetCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cache *SortingCache `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *GetCacheResponse) Reset() {
	*x = GetCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organise_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheResponse) ProtoMessage() {}

func (x *GetCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organise_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheResponse.ProtoReflect.Descriptor instead.
func (*GetCacheResponse) Descriptor() ([]byte, []int) {
	return file_organise_proto_rawDescGZIP(), []int{22}
}

func (x *GetCacheResponse) GetCache() *SortingCache {
	if x != nil {
		return x.Cache
	}
	return nil
}

var File_organise_proto protoreflect.FileDescriptor

var file_organise_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x65, 0x72, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x0a, 0x0b, 0x53,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x69, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x69, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x42, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x49, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x22, 0xb1, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x27, 0x0a, 0x0e, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x0c, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0c,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0b,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x47, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x61, 0x72, 0x64, 0x47, 0x61, 0x70, 0x12, 0x4f, 0x0a,
	0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6f, 0x72,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x6f, 0x72, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x6f, 0x72, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x0f, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x48, 0x61, 0x72, 0x64, 0x47, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x07, 0x53, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x59, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x59, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x45, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x59,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x05,
	0x22, 0x30, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x10, 0x01, 0x22, 0x38, 0x0a, 0x06, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x22, 0x41, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x47,
	0x49, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x58, 0x10, 0x03, 0x22,
	0xec, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x42,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61,
	0x64, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6e, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x90, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6f, 0x72,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0x7e,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x4d,
	0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a,
	0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x32, 0x95,
	0x05, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x21, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_organise_proto_rawDescOnce sync.Once
	file_organise_proto_rawDescData = file_organise_proto_rawDesc
)

func file_organise_proto_rawDescGZIP() []byte {
	file_organise_proto_rawDescOnce.Do(func() {
		file_organise_proto_rawDescData = protoimpl.X.CompressGZIP(file_organise_proto_rawDescData)
	})
	return file_organise_proto_rawDescData
}

var file_organise_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_organise_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_organise_proto_goTypes = []interface{}{
	(Location_Sorting)(0),           // 0: recordsorganiser.Location.Sorting
	(Location_Checking)(0),          // 1: recordsorganiser.Location.Checking
	(Location_InPlay)(0),            // 2: recordsorganiser.Location.InPlay
	(Location_MediaType)(0),         // 3: recordsorganiser.Location.MediaType
	(*Empty)(nil),                   // 4: recordsorganiser.Empty
	(*SortMapping)(nil),             // 5: recordsorganiser.SortMapping
	(*CacheEntry)(nil),              // 6: recordsorganiser.CacheEntry
	(*SortingCache)(nil),            // 7: recordsorganiser.SortingCache
	(*LabelExtractor)(nil),          // 8: recordsorganiser.LabelExtractor
	(*ReleasePlacement)(nil),        // 9: recordsorganiser.ReleasePlacement
	(*Quota)(nil),                   // 10: recordsorganiser.Quota
	(*Location)(nil),                // 11: recordsorganiser.Location
	(*Organisation)(nil),            // 12: recordsorganiser.Organisation
	(*AddLocationRequest)(nil),      // 13: recordsorganiser.AddLocationRequest
	(*AddLocationResponse)(nil),     // 14: recordsorganiser.AddLocationResponse
	(*GetOrganisationRequest)(nil),  // 15: recordsorganiser.GetOrganisationRequest
	(*GetOrganisationResponse)(nil), // 16: recordsorganiser.GetOrganisationResponse
	(*LocateRequest)(nil),           // 17: recordsorganiser.LocateRequest
	(*LocateResponse)(nil),          // 18: recordsorganiser.LocateResponse
	(*QuotaRequest)(nil),            // 19: recordsorganiser.QuotaRequest
	(*QuotaResponse)(nil),           // 20: recordsorganiser.QuotaResponse
	(*UpdateLocationRequest)(nil),   // 21: recordsorganiser.UpdateLocationRequest
	(*UpdateLocationResponse)(nil),  // 22: recordsorganiser.UpdateLocationResponse
	(*AddExtractorRequest)(nil),     // 23: recordsorganiser.AddExtractorRequest
	(*AddExtractorResponse)(nil),    // 24: recordsorganiser.AddExtractorResponse
	(*GetCacheRequest)(nil),         // 25: recordsorganiser.GetCacheRequest
	(*GetCacheResponse)(nil),        // 26: recordsorganiser.GetCacheResponse
	nil,                             // 27: recordsorganiser.CacheEntry.EntryEntry
	nil,                             // 28: recordsorganiser.Location.FolderOrderEntry
	nil,                             // 29: recordsorganiser.Location.FolderSortEntry
	nil,                             // 30: recordsorganiser.Location.HardGapEntry
}
var file_organise_proto_depIdxs = []int32{
	27, // 0: recordsorganiser.CacheEntry.entry:type_name -> recordsorganiser.CacheEntry.EntryEntry
	6,  // 1: recordsorganiser.SortingCache.cache:type_name -> recordsorganiser.CacheEntry
	28, // 2: recordsorganiser.Location.folder_order:type_name -> recordsorganiser.Location.FolderOrderEntry
	29, // 3: recordsorganiser.Location.folder_sort:type_name -> recordsorganiser.Location.FolderSortEntry
	30, // 4: recordsorganiser.Location.hard_gap:type_name -> recordsorganiser.Location.HardGapEntry
	9,  // 5: recordsorganiser.Location.releases_location:type_name -> recordsorganiser.ReleasePlacement
	0,  // 6: recordsorganiser.Location.sort:type_name -> recordsorganiser.Location.Sorting
	10, // 7: recordsorganiser.Location.quota:type_name -> recordsorganiser.Quota
	1,  // 8: recordsorganiser.Location.checking:type_name -> recordsorganiser.Location.Checking
	2,  // 9: recordsorganiser.Location.in_play:type_name -> recordsorganiser.Location.InPlay
	3,  // 10: recordsorganiser.Location.media_type:type_name -> recordsorganiser.Location.MediaType
	11, // 11: recordsorganiser.Organisation.locations:type_name -> recordsorganiser.Location
	8,  // 12: recordsorganiser.Organisation.extractors:type_name -> recordsorganiser.LabelExtractor
	5,  // 13: recordsorganiser.Organisation.sort_mappings:type_name -> recordsorganiser.SortMapping
	11, // 14: recordsorganiser.AddLocationRequest.add:type_name -> recordsorganiser.Location
	12, // 15: recordsorganiser.AddLocationResponse.now:type_name -> recordsorganiser.Organisation
	11, // 16: recordsorganiser.GetOrganisationRequest.locations:type_name -> recordsorganiser.Location
	11, // 17: recordsorganiser.GetOrganisationResponse.locations:type_name -> recordsorganiser.Location
	11, // 18: recordsorganiser.LocateResponse.found_location:type_name -> recordsorganiser.Location
	10, // 19: recordsorganiser.QuotaResponse.quota:type_name -> recordsorganiser.Quota
	11, // 20: recordsorganiser.UpdateLocationRequest.update:type_name -> recordsorganiser.Location
	8,  // 21: recordsorganiser.AddExtractorRequest.extractor:type_name -> recordsorganiser.LabelExtractor
	7,  // 22: recordsorganiser.GetCacheResponse.cache:type_name -> recordsorganiser.SortingCache
	0,  // 23: recordsorganiser.Location.FolderSortEntry.value:type_name -> recordsorganiser.Location.Sorting
	13, // 24: recordsorganiser.OrganiserService.AddLocation:input_type -> recordsorganiser.AddLocationRequest
	15, // 25: recordsorganiser.OrganiserService.GetOrganisation:input_type -> recordsorganiser.GetOrganisationRequest
	21, // 26: recordsorganiser.OrganiserService.UpdateLocation:input_type -> recordsorganiser.UpdateLocationRequest
	17, // 27: recordsorganiser.OrganiserService.Locate:input_type -> recordsorganiser.LocateRequest
	19, // 28: recordsorganiser.OrganiserService.GetQuota:input_type -> recordsorganiser.QuotaRequest
	23, // 29: recordsorganiser.OrganiserService.AddExtractor:input_type -> recordsorganiser.AddExtractorRequest
	25, // 30: recordsorganiser.OrganiserService.GetCache:input_type -> recordsorganiser.GetCacheRequest
	14, // 31: recordsorganiser.OrganiserService.AddLocation:output_type -> recordsorganiser.AddLocationResponse
	16, // 32: recordsorganiser.OrganiserService.GetOrganisation:output_type -> recordsorganiser.GetOrganisationResponse
	22, // 33: recordsorganiser.OrganiserService.UpdateLocation:output_type -> recordsorganiser.UpdateLocationResponse
	18, // 34: recordsorganiser.OrganiserService.Locate:output_type -> recordsorganiser.LocateResponse
	20, // 35: recordsorganiser.OrganiserService.GetQuota:output_type -> recordsorganiser.QuotaResponse
	24, // 36: recordsorganiser.OrganiserService.AddExtractor:output_type -> recordsorganiser.AddExtractorResponse
	26, // 37: recordsorganiser.OrganiserService.GetCache:output_type -> recordsorganiser.GetCacheResponse
	31, // [31:38] is the sub-list for method output_type
	24, // [24:31] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_organise_proto_init() }
func file_organise_proto_init() {
	if File_organise_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_organise_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortingCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelExtractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organisation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganisationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganisationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExtractorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExtractorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organise_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_organise_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Quota_Slots)(nil),
		(*Quota_Width)(nil),
		(*Quota_AbsoluteWidth)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_organise_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_organise_proto_goTypes,
		DependencyIndexes: file_organise_proto_depIdxs,
		EnumInfos:         file_organise_proto_enumTypes,
		MessageInfos:      file_organise_proto_msgTypes,
	}.Build()
	File_organise_proto = out.File
	file_organise_proto_rawDesc = nil
	file_organise_proto_goTypes = nil
	file_organise_proto_depIdxs = nil
}
