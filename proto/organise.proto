syntax = "proto3";

package proto;

import "github.com/brotherlogic/godiscogs/godiscogs.proto";
import "github.com/brotherlogic/discogssyncer/server/server.proto";

message Empty {}

message CombinedRelease {
  godiscogs.Release release = 1;
  discogsserver.ReleaseMetadata metadata = 2;
}

message ReleasePlacement {
        // The id of the release
        int32 release_id = 1;

        // The index in the folder
        int32 index = 2;

        // The slot in the folder
        int32 slot = 3;

        // The prior release
        int32 before_release_id = 4;

        // The following release
        int32 after_release_id = 5;
}

message Location {
        // The name of the location
        string name = 1;

        // The number of units within the location
        int32 units = 2;

        // The folder ids that are stored in this location
        repeated int32 folder_ids = 3;

        // The placement of releases in the folder
        repeated ReleasePlacement releases_location = 4;

        // The means by which the folder is sorted
        enum Sorting {
             BY_LABEL_CATNO = 0;
             BY_DATE_ADDED = 1;
        }
        Sorting sort = 5;
}

message Organisation {
        // Timestamp this organisation was made
        int64 timestamp = 1;

        // The locations in this sorting
        repeated Location locations = 2;
}

message OrganisationList {
        repeated Organisation organisations = 1;
}

message LocationMove {
        ReleasePlacement old = 1;
        ReleasePlacement new = 2;
}

message OrganisationMoves {
        int64 start_timestamp = 1;
        int64 end_timestamp = 2;
        repeated LocationMove moves = 3;
}

message ReleaseLocation {
  Location location = 1;
  int32 slot = 2;
  godiscogs.Release before = 3;
  godiscogs.Release after = 4;
}

service OrganiserService {
        rpc Organise (Empty) returns (OrganisationMoves) {};
        rpc Locate (godiscogs.Release) returns (ReleaseLocation) {};
        rpc AddLocation (Location) returns (Location) {};
        rpc GetLocation (Location) returns (Location) {};
        rpc GetOrganisations (Empty) returns (OrganisationList) {};
        rpc GetOrganisation (Empty) returns (Organisation) {};
          rpc UpdateLocation (Location) returns (Location) {};
}
