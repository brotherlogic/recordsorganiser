syntax = "proto3";

package proto;

message Empty {}

message LabelExtractor {
  // The id of the label
  int32 label_id = 1;

  // The extractor
  string extractor = 2;
}

message ReleasePlacement {
  // The id of the release
  int32 instance_id = 1;

  // The index in the folder
  int32 index = 2;

  // The slot in the folder
  int32 slot = 3;
}

message Quota {
  // The number of allowed units
  int32 num_of_slots = 1;
  
  // The total width of the set
  int32 total_width = 2;
  
  oneof quota_type {
    // The number of allowed units
    int32 slots = 3;
    
    // The total width of the set
    int32 width = 4;
  }
}

message Location {
  // The name of the location
  string name = 1;

  // The number of units within the location
  int32 slots = 2;

  // The folder ids that are stored in this location
  repeated int32 folder_ids = 3;

  // The placement of releases in the folder
  repeated ReleasePlacement releases_location = 4;

  // The means by which the folder is sorted
  enum Sorting {
    BY_LABEL_CATNO = 0;
    BY_DATE_ADDED = 1;
    BY_RELEASE_DATE = 2;
  }
  Sorting sort = 5;

  // The timestamp of this given location / arrangement
  int64 timestamp = 6;

  // The allowed quota for this location, if any
  Quota quota = 7;

  // The type of format we expect in this location
  string expected_format = 8;

  // The type of label we don't expect in this location
  string unexpected_label = 9;

  // Don't send an alert when there are quota problems
  bool no_alert = 10;

  // Folder to move to when this is over quota
  int32 spill_folder = 11;

  // Quota Check opt out - if set no alerts on quota
  bool opt_out_quota_checks = 12;

  // Time to include reorgs, if < 0 we don't reorg
  int64 reorg_time = 13;
  int64 last_reorg = 14;
}

message Organisation {
  // Timestamp this organisation was made
  int64 timestamp = 1;

  // The locations in this sorting
  repeated Location locations = 2;

  // The extractors used for sorting
  repeated LabelExtractor extractors = 3;
}

message AddLocationRequest {
  Location add = 1;
}

message AddLocationResponse {
  Organisation now = 1;
}

message GetOrganisationRequest {
  repeated Location locations = 1;

  // Force a reorg on returned locations
  bool force_reorg = 2;

  // Reset the reorg time
  bool org_reset = 3;
}

message GetOrganisationResponse {
  repeated Location locations = 1;
  int32 number_processed = 2;
}

message LocateRequest {
  int32 instance_id = 1;
}

message LocateResponse {
  Location found_location = 2;
}

message QuotaRequest {
  int32 folder_id = 1;
  bool include_records = 2;
  string name = 3;
}

message QuotaResponse {
  bool over_quota = 1;
  int32 spill_folder = 2;
  string location_name = 3;
  repeated int32 instance_id = 4;
  Quota quota = 5;
}

message UpdateLocationRequest {
  string location = 1;
  Location update = 2;
}

message UpdateLocationResponse {

}

message AddExtractorRequest {
  LabelExtractor extractor = 1;
}

message AddExtractorResponse {}

service OrganiserService {
  rpc AddLocation (AddLocationRequest) returns (AddLocationResponse) {};
  rpc GetOrganisation (GetOrganisationRequest) returns (GetOrganisationResponse) {};
  rpc UpdateLocation (UpdateLocationRequest) returns (UpdateLocationResponse) {};
  rpc Locate (LocateRequest) returns (LocateResponse) {};
  rpc GetQuota (QuotaRequest) returns (QuotaResponse) {};
  rpc AddExtractor (AddExtractorRequest) returns (AddExtractorResponse) {};
}
